---
version: '2'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - ${ZOOKEEPER_DATA_PATH}:/var/lib/zookeeper/data
      - ${ZOOKEEPER_LOG_PATH}:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:6.1.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - ${KAFKA_DATA_PATH}:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${MDML_HOST}:29092,PLAINTEXT_HOST://${MDML_HOST}:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 10
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081

  schema-registry:
    image: confluentinc/cp-schema-registry:6.1.1
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  connect:
    image: confluentinc/cp-kafka-connect:5.5.4
    hostname: connect
    container_name: connect
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    volumes:
      - ./connectors/confluentinc-kafka-connect-jdbc-10.1.1:/usr/share/java/confluentinc-kafka-connect-jdbc-10.1.1
      - ./connectors/kafka-connect-mqtt/target/kafka-connect-mqtt-1.1.0-package/kafka-connect-mqtt:/usr/share/java/kafka-connect-mqtt
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # CLASSPATH required due to CC-2422
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-6.1.1.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  rest-proxy:
    image: confluentinc/cp-kafka-rest:6.1.1
    depends_on:
      - broker
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  postgres:
    image: postgres:13.3
    container_name: postgres
    restart: always
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: "kafka"
      POSTGRES_HOST_AUTH_METHOD: "trust"
      POSTGRES_USER: "root"
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ${POSTGRES_DATA_PATH}:/var/lib/postgresql/data

  grafana:
    image: grafana/grafana:7.4.3
    container_name: grafana
    restart: always
    user: root
    ports:
        - 3000:3000
    environment:
        GF_SERVER_PROTOCOL: "http"
        GF_SERVER_HTTP_ADDR: "0.0.0.0"
        GF_SERVER_DOMAIN: "${MDML_HOST}"
        GF_SECURITY_ADMIN_PASSWORD: "${MDML_GRAFANA_SECRET}"
        GF_DATABASE_URL: "mysql://root:${MDML_GRAFDB_ROOT_SECRET}@grafana_mysqldb:3306/grafana"
        GF_INSTALL_PLUGINS: "natel-plotly-panel,larona-epict-panel"
        GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: "natel-plotly-panel,larona-epict-panel"
    depends_on:
        - grafana_mysqldb

  grafana_mysqldb:
    image: mysql:8.0
    container_name: grafana_db
    restart: always
    ports:
        - 3306:3306
    environment:
        MYSQL_ROOT_PASSWORD: "${MDML_GRAFDB_ROOT_SECRET}"
        MYSQL_DATABASE: "grafana"
        MYSQL_USER: "grafana"
        MYSQL_PASSWORD: "${MDML_GRAFDB_SECRET}"
    volumes:
        - ./grafana_mysqldb/data:/var/lib/mysql
        - ./grafana_mysqldb/backups:/var/lib/backups

  replay_service:
    build: replay_service/.
    container_name: replay_service
    restart: always
    environment:
      HOST: "${MDML_HOST}"
      SCHEMA_HOST: "${MDML_SCHEMA_HOST}"
      STORAGE_GRID_ACCESS_KEY: ${STORAGE_GRID_ACCESS_KEY}
      STORAGE_GRID_SECRET_KEY: ${STORAGE_GRID_SECRET_KEY}
    volumes:
      - ./replay_service:/usr/src/app
    command: ["python", "./replay_service.py"]
    depends_on:
      - broker

  experiment_service:
    build: experiment_service/.
    container_name: experiment_service
    restart: always
    environment:
      HOST: "${MDML_HOST}"
      SCHEMA_HOST: "${MDML_SCHEMA_HOST}"
      STORAGE_GRID_ACCESS_KEY: ${STORAGE_GRID_ACCESS_KEY}
      STORAGE_GRID_SECRET_KEY: ${STORAGE_GRID_SECRET_KEY}
    volumes:
      - ./experiment_service:/usr/src/app
    command: ["python", "./experiment_service.py"]
    depends_on:
      - broker
